program		 

statements	: NEWLINE* statement (NEWLINE+ statement)* NEWLINE*

statement	: KEYWORD:RETURN expr?
			| KEYWORD:CONTINUE
			| KEYWORD:BREAK
			| expr
				
				/*For our expr grammar rule, we are stating that a expr can be a KEYWORD VAR followed by an identifier
				which would be our variable name for example var num. Additionally, for our expression it can contain an equal sign followed by another expression.
				var num = 13; */
expr		: KEYWORD:VAR IDENTIFIER EQ expr
				#For our logical operation rule we can have one or more factors followed by a comparison expression followed by the keyword AND or OR
				followed by another factor. For example a == 5 and b == 6 or 1 == 2 or 1 == 3*/
			| comp-expr ((KEYWORD:AND|KEYWORD:OR) comp-expr)*

				/*For our comparison expression, we can have a NOT keyword followed by another comparison expression.
				For example NOT 1 == 2*/
comp-expr	: NOT comp-expr
				/*Additionally, our comparison expression can consist of a arithmetic expression on the left hand side 
				followed by one or more comparison tokens followed by another arithmetic expression. For example 5 > 6 or 1 == 2*/
			| arith-expr ((EE|LT|GT|LTE|GTE) arith-expr)*

				/*For our arithmetic expression rule, we can have one or more factors being added or subtracted by another term
				Additionally, the factors can be written in brackets to abide by the BOMDAS Rule. For example 3((-3) * 4)*/
arith-expr	:	term ((PLUS|MINUS) term)*

				/*For our term expression we can have one or more factors followed by the MUL or DIV operator*/
term		: factor ((MUL|DIV) factor)*

factor		: (PLUS|MINUS) factor
			| power

power		: call (POW factor)*

call		: atom (LPAREN (expr (COMMA expr)*)? RPAREN)?

				/*For our atom rule, we can have a integer, float, string or identifier being entered*/
atom 		: INT|FLOAT|STRING|IDENTIFIER
				/*Additionally for our atom rule we can have an expression that contains a ( followed by an expression immediatelly follwed by a )
				For example (5 + 5.5) integer + a float
				(a + b) identifier + identifier */
			| LPAREN expr RPAREN
			| list-expr
			| if-expr
			| for-expr
			| while-expr
			| func-def

list-expr	: LSQUARE (expr (COMMA expr)*)? RSQUARE

				/*For our if-expr rule it states that we have to have the keyword IF followed by an expression followed by the keyword THEN and an expression.
				For example IF num == 2 THEN print ("Num is a even number")*/

				/*Additionally, for our if-expr we can have one or more IF statement in the form of ELIF to evaluate the condition false for our first if statement
				For Example IF num / 2 == 0 THEN print ("Num is a even number") ELIF num / 2 != 0 THEN print ("Num is a odd number")*/
if-expr		: KEYWORD:IF expr KEYWORD:THEN 
			  (statement if-expr-b|if-expr-c?)
			| (NEWLINE statements KEYWORD:END|if-expr-b|if-expr-c)


if-expr-b	: KEYWORD:ELIF expr KEYWORD:THEN 
			  (statement if-expr-b|if-expr-c?)
			| (NEWLINE statements KEYWORD:END|if-expr-b|if-expr-c)


				/*Finally, we have the option to use the keyword ELSE followed by an expression to further evaluate our conditions.
if-expr-c	: KEYWORD:ELSE
			  statement
			| (NEWLINE statements KEYWORD:END)


				/*For our for-expr it states that to use a FOR loop, we have to have the keyword FOR followed by an identifier, followed by the equal sign followed by the keyword
				TO followed by an expression. Additionally, we have the option to use the keyword STEP in our FOR loop as well as the KEYWORD THEN.
				For example For a = 0 TO 3 THEN result = result * 1*/
for-expr	: KEYWORD:FOR IDENTIFIER EQ expr KEYWORD:TO expr 
			  (KEYWORD:STEP expr)? KEYWORD:THEN 
			  statement
			| (NEWLINE statements KEYWORD:END)

				/*For our while-expr rule it states that to use a WHILE loop, we have to have the keyword WHILE followed by an expression followed by the keyword THEN which
				is followed by another expression. For example WHILE num != 3 THEN print ("Number is in DIGITS")*/
while-expr	: KEYWORD:WHILE expr KEYWORD:THEN 
			  statement
			| (NEWLINE statements KEYWORD:END)

				/*For our function rule it states that to create a function, we have to first use the keyword FUN followed by an optional identifier or variable name.
				Additionally for our function definition there should be a left parenthesis to begin stating our arguments, however, we have the option to add arguments
				to our function definition (?) else we must have an identifier followed by a comma then followed by zero or more identifier(s). Finally, our function
				definition will be closed with an right parenthesis.*/
func-def	: KEYWORD:FUN IDENTIFIER?
			| LPAREN (IDENTIFIER (COMMA IDENTIFIER)*)? RPAREN (ARROW expr)?
			| (NEWLINE statements KEYWORD:END)